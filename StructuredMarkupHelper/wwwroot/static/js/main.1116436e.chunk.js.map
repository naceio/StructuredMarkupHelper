{"version":3,"sources":["contents/app-logo.svg","contents/landing.svg","home.tsx","global-config.ts","analyze.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","marginTop","padding","display","alignItems","width","boxShadow","input","marginLeft","spacing","flex","fontSize","iconButton","color","divider","height","margin","Home","classes","history","useHistory","useState","url","setUrl","Fragment","Grid","item","xs","className","href","target","Paper","style","onSubmit","e","push","preventDefault","InputBase","placeholder","inputProps","onChange","value","Divider","orientation","IconButton","aria-label","onClick","src","Landing","globalConfig","require","marginBottom","marginRight","findIndices","Analyze","URLSearchParams","useLocation","search","get","newUrl","data","mappings","hasError","markupResult","setMarkupResult","mounted","setMounted","analyzed","setAnalyzed","fetch","method","headers","body","JSON","stringify","then","response","json","result","window","alert","message","useEffect","container","borderTop","LinearProgress","defaultValue","location","id","borderLeft","CircularProgress","map","m","Box","flexDirection","flexGrow","justifyContent","schemaOrgType","schemaType","Chip","size","icon","label","clickable","findItem","undefined","positions","length","pos","word","document","text","substring","start","end","getElementById","contentWindow","find","iptcCategories","iptc","iptcLabel","variant","enableClipboard","displayDataTypes","x","App","overflow","to","AppLogo","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1116436e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/app-logo.d685a859.svg\";","export default __webpack_public_path__ + \"static/media/landing.bd12d204.svg\";","import React, { useState } from 'react';\r\nimport { Box, Button, Divider, IconButton, InputBase, makeStyles, Typography, withStyles } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AccountTreeOutlinedIcon from '@material-ui/icons/AccountTreeOutlined';\r\nimport Landing from './contents/landing.svg';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop:'7%',\r\n        padding: '1% 2%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: '100%',\r\n        boxShadow: '0 1px 14px 2px #7b7b7b'\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n        fontSize: '1.2vw'\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n        color:'#FC826A'\r\n    },\r\n    divider: {\r\n        height: '1.2vw',\r\n        margin: 4,\r\n    },\r\n}));\r\n\r\nfunction Home() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const [url, setUrl] = useState<string>('');\r\n\r\n    return (\r\n        <React.Fragment>\r\n                <Grid item xs={5}>\r\n                    <div className=\"main-container\">\r\n                        <Grid item xs={12}>\r\n                            <h1 className=\"main-title\">\r\n                            Structured Markup Generator\r\n                        </h1>\r\n                            <p className=\"main-par\">\r\n                                Schema.org is the result of collaboration between Google, Bing, Yandex, and Yahoo!\r\n                                to improve the web by creating a structured data markup schema supported by major search engines. On-page markup helps search engines understand the information on web pages and provide richer search results!\r\n                               \r\n                        </p>\r\n                        <p className=\"second-par\">\r\n                            Markup expert will help you generate structured-data markup by analyzing the content of your webpage; powered by \r\n                            <a href=\"https://www.expert.ai/\" target=\"_blank\">expert.ai</a>\r\n                        </p>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Paper className={classes.root}>\r\n                                    <form style={{width:'100%'}} onSubmit={(e)=>{\r\n                                        if(url){\r\n                                            history.push(`/analyze?url=${url}`);\r\n                                        }\r\n                                        e.preventDefault();\r\n                                    }}>\r\n                                    <InputBase  style={{width:'100%'}}\r\n                                        className={classes.input}\r\n                                        placeholder=\"Enter a Url to Analyze\"\r\n                                        inputProps={{ 'aria-label': 'Url' }}\r\n                                        onChange={e=>{\r\n                                            setUrl(e.target.value);\r\n                                        }}\r\n                                    />\r\n                                    </form>\r\n                                    <Divider className={classes.divider} orientation=\"vertical\" />\r\n                                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\" onClick={()=>{\r\n                                        if(url){\r\n                                            history.push(`/analyze?url=${url}`);\r\n                                        }\r\n                                    }}>\r\n                                        <AccountTreeOutlinedIcon />\r\n                                    </IconButton>\r\n                            </Paper>\r\n                        </Grid>\r\n\r\n\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={7}>\r\n                    <div className=\"landing-container\">\r\n                        <img src={Landing} />\r\n                        <a className=\"freepik-refer\" href=\"https://www.freepik.com/vectors/design\">Designed by freepik</a>\r\n                    </div>\r\n                </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Home;","export const globalConfig = {\r\n    serverUrl: ''\r\n    //serverUrl: 'https://localhost:5001'\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Box, Button, Chip, CircularProgress, Divider, IconButton, InputBase, LinearProgress, makeStyles, Typography, withStyles } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Link,\r\n    useLocation,\r\n    useHistory\r\n} from \"react-router-dom\";\r\nimport { globalConfig } from './global-config';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountTreeOutlinedIcon from '@material-ui/icons/AccountTreeOutlined';\r\nimport ReactJson from 'react-json-view';\r\n//import Mark from 'mark.js'\r\nconst Mark = require('mark.js');\r\n//document.getElementById('web-frame')\r\n\r\ninterface MarkupResult {\r\n    data?: {\r\n        document?: {\r\n            text: string;\r\n        },\r\n        mappings?: {\r\n            iptcCategories: {\r\n                iptcId: string;\r\n                iptcLabel: string;\r\n            }[],\r\n            schemaOrgType: {\r\n                schemaId: string;\r\n                schemaType: string;\r\n            },\r\n            positions: {\r\n                start: number;\r\n                end: number;\r\n            }[]\r\n        }[]\r\n    };\r\n    hasError?: boolean;\r\n    message?: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1%',\r\n        marginBottom: '1%',\r\n        marginRight: '1%',\r\n        marginLeft: '1%',\r\n        padding: '1% 2%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: '97%',\r\n        boxShadow: '0 1px 14px 2px #7b7b7b'\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n        fontSize: '1.2vw'\r\n    },\r\n    iconButton: {\r\n        padding: 10,\r\n        color: '#FC826A'\r\n    },\r\n    divider: {\r\n        height: '1.2vw',\r\n        margin: 4,\r\n    },\r\n}));\r\n\r\nlet findIndices: { [key: string]: number } = {};\r\n\r\nfunction Analyze() {\r\n\r\n\r\n    //const markInstance = new Mark(document.body);\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    let query = new URLSearchParams(useLocation().search);\r\n\r\n    let url: string = query.get(\"url\") as string;\r\n    const [newUrl, setUrl] = useState(url);\r\n\r\n    const [markupResult, setMarkupResult] = useState<MarkupResult>({\r\n        data: {\r\n            mappings: []\r\n        },\r\n        hasError: false\r\n    });\r\n    const [mounted, setMounted] = useState(false);\r\n\r\n\r\n    const [analyzed, setAnalyzed] = useState(false);\r\n\r\n    if (!mounted) {\r\n        fetch(`${globalConfig.serverUrl}/markup/url-markup`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ url: url })\r\n        }).then(response => {\r\n            response.json().then((result: MarkupResult) => {\r\n                if (result.hasError) {\r\n                    window.alert(result.message);\r\n                }\r\n                else {\r\n                    findIndices = {};\r\n                    setMarkupResult(result);\r\n                    setAnalyzed(true);\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setMounted(true)\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container style={{ borderTop: '1px solid #ccc' }}>\r\n\r\n                <Grid item xs={9}>\r\n                    {analyzed ? null : <LinearProgress />}\r\n\r\n                    <Paper className={classes.root}>\r\n                        <form style={{ width: '100%' }} onSubmit={(e) => {\r\n                            if (newUrl) {\r\n                                history.push(`/analyze?url=${newUrl}`);\r\n                            }\r\n                            e.preventDefault();\r\n                        }}>\r\n                            <InputBase style={{ width: '100%' }}\r\n                                defaultValue={url}\r\n                                className={classes.input}\r\n                                placeholder=\"Enter a Url to Analyze\"\r\n                                inputProps={{ 'aria-label': 'Url' }}\r\n                                onChange={e => {\r\n                                    setUrl(e.target.value);\r\n                                }}\r\n                            />\r\n                        </form>\r\n                        <Divider className={classes.divider} orientation=\"vertical\" />\r\n                        <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"directions\" onClick={() => {\r\n                            if (newUrl) {\r\n                                window.location.href = `/analyze?url=${newUrl}`;\r\n                            }\r\n                        }}>\r\n                            <AccountTreeOutlinedIcon />\r\n                        </IconButton>\r\n                    </Paper>\r\n\r\n                    <iframe id='web-frame' src={`${globalConfig.serverUrl}/markup/webpage?url=${url}`} height=\"100%\" width=\"100%\"></iframe>\r\n                </Grid>\r\n\r\n                <Grid item xs={3} style={{ padding: '10px', borderLeft: '1px solid #ccc' }} >\r\n                    <div style={{ color: '#FC826A', fontSize: '2.2vw' }}>Schemas:</div>\r\n\r\n                    {analyzed ? null : <CircularProgress />}\r\n                    <div className='schemas-container'>\r\n                        {\r\n                            markupResult?.data?.mappings?.map(m => {\r\n                                return <Paper style={{ margin: '15px 0', padding: '10px' }}>\r\n                                    <Box display=\"flex\" flexDirection=\"column\" flexGrow=\"1\">\r\n\r\n                                        <Box display=\"flex\" justifyContent=\"space-between\" flexGrow=\"1\">\r\n                                            <Box display=\"flex\" justifyContent=\"flex-start\">\r\n                                                <Box className=\"schema-link\">\r\n                                                    <a href={`https://schema.org/${m.schemaOrgType.schemaType}`} target=\"_blank\">\r\n                                                        {m.schemaOrgType.schemaType} <span style={{ color: '#aaa', fontSize: '0.5vw' }}>(schema.org)</span>\r\n                                                    </a>\r\n                                                </Box>\r\n                                            </Box>\r\n                                            <Box display=\"flex\" justifyContent=\"flex-end\" flexGrow=\"1\">\r\n                                                <Box flexDirection=\"column\" justifyContent=\"flex-end\">\r\n                                                    <Box display=\"flex\">\r\n                                                        <Chip\r\n                                                            size=\"small\"\r\n                                                            icon={<SearchIcon />}\r\n                                                            label=\"Find in page\"\r\n                                                            clickable\r\n                                                            color=\"primary\"\r\n                                                            onClick={() => {\r\n\r\n                                                                let findItem = findIndices[m.schemaOrgType.schemaType];\r\n                                                                if (findItem == undefined) {\r\n                                                                    findItem = 0;\r\n                                                                    findIndices[m.schemaOrgType.schemaType] = findItem;\r\n                                                                }\r\n                                                                else {\r\n                                                                    findItem = (findItem + 1) % m.positions.length\r\n                                                                    findIndices[m.schemaOrgType.schemaType] = findItem;\r\n                                                                }\r\n\r\n                                                                let pos = m.positions[findItem];\r\n                                                                let word = markupResult.data?.document?.text.substring(pos.start, pos.end);\r\n\r\n                                                                (document as any).getElementById('web-frame').contentWindow.window.find(word, false, false, true, true, true, false);\r\n\r\n                                                                // (window as any)['mark'] = markInstance;\r\n                                                                // markInstance.unmark({\r\n                                                                //     done: () => {\r\n                                                                //         markInstance.mark(word, { iframes: true })\r\n                                                                //     },\r\n                                                                //     iframes: true\r\n                                                                // });\r\n\r\n                                                                // if ((window as any).find) {\r\n                                                                //     // aString, aCaseSensitive, aBackwards, aWrapAround, aWholeWord, aSearchInFrames, aShowDialog\r\n                                                                //     (window as any).find(word, false, false, true, true, true, false);\r\n                                                                // }\r\n\r\n                                                                // for (let offset of m.positions) {\r\n                                                                //     console.log('start', offset.start, 'end', offset.end)\r\n                                                                //     let word = markupResult.data?.document?.text.substring(offset.start, offset.end);\r\n                                                                // }\r\n                                                            }} />\r\n                                                    </Box>\r\n                                                </Box>\r\n                                            </Box>\r\n                                        </Box>\r\n                                        <Box display=\"flex\" flexGrow=\"1\" style={{ marginTop: '15px' }} flexDirection=\"column\">\r\n\r\n                                            <Box display=\"flex\" style={{ color: '#CCC', fontSize: '0.5vw', marginBottom: '5px' }}>mappings with IPTC:</Box>\r\n                                            <Box display=\"flex\">\r\n                                                {\r\n                                                    m.iptcCategories.map(iptc => {\r\n                                                        return <Box>\r\n                                                            <Chip style={{ marginLeft: '5px' }} label={iptc.iptcLabel} />\r\n                                                        </Box>\r\n                                                    })\r\n                                                }\r\n                                            </Box>\r\n                                        </Box>\r\n                                        <Box display=\"flex\" flexGrow=\"1\" style={{ marginTop: '15px' }} flexDirection=\"column\">\r\n\r\n                                            <Box display=\"flex\" style={{ color: '#CCC', fontSize: '0.5vw', marginBottom: '5px' }}>mapped words:</Box>\r\n                                            <Box display=\"flex\">\r\n                                                {\r\n                                                    m.positions.map(pos => {\r\n                                                        return <Box>\r\n                                                            <Chip style={{ marginLeft: '5px' }}\r\n                                                                color=\"secondary\" label={markupResult.data?.document?.text.substring(pos.start, pos.end)} variant=\"outlined\" />\r\n                                                        </Box>\r\n                                                    })\r\n                                                }\r\n                                            </Box>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Paper>\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div className=\"jsonld-container\">\r\n                        <a className=\"jsonld-link\" target=\"blank\" href=\"https://developers.google.com/search/docs/guides/intro-structured-data\">Understand how structured data works</a>\r\n                        <ReactJson style={{ marginTop: '15px' }} enableClipboard={true} displayDataTypes={false} src={{\r\n                            '@context': 'http://schema.org',\r\n                            '@graph': markupResult?.data?.mappings?.map(x => {\r\n                                return {\r\n                                    '@type': x.schemaOrgType.schemaType\r\n                                }\r\n                            })\r\n                        }} />\r\n                    </div>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n\r\n}\r\n\r\nexport default Analyze;","import React from 'react';\nimport AppLogo from './contents/app-logo.svg';\nimport './app.scss';\nimport { Box, Button, Divider, IconButton, InputBase, makeStyles, Typography, withStyles } from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport Home from './home';\nimport Analyze from './analyze';\n\n\n\nfunction App() {\n\n    return (\n        <React.Fragment>\n            <Router>\n                <Grid container>\n                    <Grid item xs={12} style={{ height: 105, overflow: 'hidden' }}>\n                        <Box display=\"flex\" justifyContent=\"space-between\">\n                            <Box display=\"flex\" justifyContent=\"flex-start\">\n                                <Link to='/'><img src={AppLogo} className=\"app-logo\" /></Link>\n                            </Box>\n                            <Box display=\"flex\" justifyContent=\"flex-end\" flexGrow=\"1\" className=\"menu-container\">\n                                <Box className=\"menu-link\">\n                                    <a href=\"https://github.com/naceio/StructuredMarkupHelper\" target=\"_blank\">github</a>\n                                </Box>\n                                <Box className=\"menu-link\">\n                                    <a href=\"https://www.expert.ai/\" target=\"_blank\">expert.ai</a>\n                                </Box>\n                            </Box>\n                        </Box>\n                    </Grid>\n                    <Route path=\"/analyze\" exact>\n                        <Analyze />\n                    </Route>\n                    <Route path=\"/\" exact>\n                        <Home />\n                    </Route>\n\n\n                </Grid>\n            </Router>\n        </React.Fragment >\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}