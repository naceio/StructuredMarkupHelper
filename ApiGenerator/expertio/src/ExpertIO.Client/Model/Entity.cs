/* 
 * expert.ai Natural Language API
 *
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * The version of the OpenAPI document: v2
 * Contact: api.inquiry@expert.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ExpertIO.Client.Client.OpenAPIDateConverter;

namespace ExpertIO.Client.Model
{
    /// <summary>
    /// Entity info
    /// </summary>
    [DataContract]
    public partial class Entity :  IEquatable<Entity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Entity" /> class.
        /// </summary>
        /// <param name="type">Entity type.</param>
        /// <param name="lemma">Base form (lemma) of the entity name.</param>
        /// <param name="syncon">ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array.</param>
        /// <param name="positions">Positions of the entity&#39;s mentions.</param>
        /// <param name="relevance">Entity relevance.</param>
        /// <param name="attributes">Entity attributes inferred from the context or from the Knowledge Graph.</param>
        public Entity(string type = default(string), string lemma = default(string), long syncon = default(long), List<DocumentPosition> positions = default(List<DocumentPosition>), long relevance = default(long), List<InferredAttribute> attributes = default(List<InferredAttribute>))
        {
            this.Type = type;
            this.Lemma = lemma;
            this.Syncon = syncon;
            this.Positions = positions;
            this.Relevance = relevance;
            this.Attributes = attributes;
        }
        
        /// <summary>
        /// Entity type
        /// </summary>
        /// <value>Entity type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Base form (lemma) of the entity name
        /// </summary>
        /// <value>Base form (lemma) of the entity name</value>
        [DataMember(Name="lemma", EmitDefaultValue=false)]
        public string Lemma { get; set; }

        /// <summary>
        /// ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array
        /// </summary>
        /// <value>ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array</value>
        [DataMember(Name="syncon", EmitDefaultValue=false)]
        public long Syncon { get; set; }

        /// <summary>
        /// Positions of the entity&#39;s mentions
        /// </summary>
        /// <value>Positions of the entity&#39;s mentions</value>
        [DataMember(Name="positions", EmitDefaultValue=false)]
        public List<DocumentPosition> Positions { get; set; }

        /// <summary>
        /// Entity relevance
        /// </summary>
        /// <value>Entity relevance</value>
        [DataMember(Name="relevance", EmitDefaultValue=false)]
        public long Relevance { get; set; }

        /// <summary>
        /// Entity attributes inferred from the context or from the Knowledge Graph
        /// </summary>
        /// <value>Entity attributes inferred from the context or from the Knowledge Graph</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public List<InferredAttribute> Attributes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Entity {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Lemma: ").Append(Lemma).Append("\n");
            sb.Append("  Syncon: ").Append(Syncon).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("  Relevance: ").Append(Relevance).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Entity);
        }

        /// <summary>
        /// Returns true if Entity instances are equal
        /// </summary>
        /// <param name="input">Instance of Entity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Entity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Lemma == input.Lemma ||
                    (this.Lemma != null &&
                    this.Lemma.Equals(input.Lemma))
                ) && 
                (
                    this.Syncon == input.Syncon ||
                    (this.Syncon != null &&
                    this.Syncon.Equals(input.Syncon))
                ) && 
                (
                    this.Positions == input.Positions ||
                    this.Positions != null &&
                    input.Positions != null &&
                    this.Positions.SequenceEqual(input.Positions)
                ) && 
                (
                    this.Relevance == input.Relevance ||
                    (this.Relevance != null &&
                    this.Relevance.Equals(input.Relevance))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Lemma != null)
                    hashCode = hashCode * 59 + this.Lemma.GetHashCode();
                if (this.Syncon != null)
                    hashCode = hashCode * 59 + this.Syncon.GetHashCode();
                if (this.Positions != null)
                    hashCode = hashCode * 59 + this.Positions.GetHashCode();
                if (this.Relevance != null)
                    hashCode = hashCode * 59 + this.Relevance.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
