/* 
 * expert.ai Natural Language API
 *
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * The version of the OpenAPI document: v2
 * Contact: api.inquiry@expert.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ExpertIO.Client.Client.OpenAPIDateConverter;

namespace ExpertIO.Client.Model
{
    /// <summary>
    /// Phrase info
    /// </summary>
    [DataContract]
    public partial class Phrase :  IEquatable<Phrase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Phrase" /> class.
        /// </summary>
        /// <param name="start">Zero-based position of the first character of the phrase.</param>
        /// <param name="end">Zero-based position of the first character after the phrase.</param>
        /// <param name="tokens">Indexes (in the &#x60;tokens&#x60; array) of the tokens that make up the phrase.</param>
        /// <param name="type">Phrase type.</param>
        public Phrase(long start = default(long), long end = default(long), List<int> tokens = default(List<int>), string type = default(string))
        {
            this.Start = start;
            this.End = end;
            this.Tokens = tokens;
            this.Type = type;
        }
        
        /// <summary>
        /// Zero-based position of the first character of the phrase
        /// </summary>
        /// <value>Zero-based position of the first character of the phrase</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public long Start { get; set; }

        /// <summary>
        /// Zero-based position of the first character after the phrase
        /// </summary>
        /// <value>Zero-based position of the first character after the phrase</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public long End { get; set; }

        /// <summary>
        /// Indexes (in the &#x60;tokens&#x60; array) of the tokens that make up the phrase
        /// </summary>
        /// <value>Indexes (in the &#x60;tokens&#x60; array) of the tokens that make up the phrase</value>
        [DataMember(Name="tokens", EmitDefaultValue=false)]
        public List<int> Tokens { get; set; }

        /// <summary>
        /// Phrase type
        /// </summary>
        /// <value>Phrase type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Phrase {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Phrase);
        }

        /// <summary>
        /// Returns true if Phrase instances are equal
        /// </summary>
        /// <param name="input">Instance of Phrase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Phrase input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Tokens != null)
                    hashCode = hashCode * 59 + this.Tokens.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
