/* 
 * expert.ai Natural Language API
 *
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * The version of the OpenAPI document: v2
 * Contact: api.inquiry@expert.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ExpertIO.Client.Client.OpenAPIDateConverter;

namespace ExpertIO.Client.Model
{
    /// <summary>
    /// Category
    /// </summary>
    [DataContract]
    public partial class Category :  IEquatable<Category>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Category" /> class.
        /// </summary>
        /// <param name="id">Category ID.</param>
        /// <param name="label">Category label.</param>
        /// <param name="hierarchy">Hierarchical path.</param>
        /// <param name="score">Score assigned to the category to represent its relevance.</param>
        /// <param name="winner">True if the category is deemed particularly relevant.</param>
        /// <param name="_namespace">Name of the software package containing the reference taxonomy.</param>
        /// <param name="frequency">Score expressed as a percentage of the sum of the scores of all the candidate categories, winners and not (see the **score** property).</param>
        /// <param name="positions">Positions of the portions of text that contributed to the selection of the category.</param>
        public Category(string id = default(string), string label = default(string), List<string> hierarchy = default(List<string>), double score = default(int), bool winner = default(bool), string _namespace = default(string), float frequency = default(float), List<DocumentPosition> positions = default(List<DocumentPosition>))
        {
            this.Id = id;
            this.Label = label;
            this.Hierarchy = hierarchy;
            this.Score = score;
            this.Winner = winner;
            this.Namespace = _namespace;
            this.Frequency = frequency;
            this.Positions = positions;
        }
        
        /// <summary>
        /// Category ID
        /// </summary>
        /// <value>Category ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Category label
        /// </summary>
        /// <value>Category label</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Hierarchical path
        /// </summary>
        /// <value>Hierarchical path</value>
        [DataMember(Name="hierarchy", EmitDefaultValue=false)]
        public List<string> Hierarchy { get; set; }

        /// <summary>
        /// Score assigned to the category to represent its relevance
        /// </summary>
        /// <value>Score assigned to the category to represent its relevance</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public double Score { get; set; }

        /// <summary>
        /// True if the category is deemed particularly relevant
        /// </summary>
        /// <value>True if the category is deemed particularly relevant</value>
        [DataMember(Name="winner", EmitDefaultValue=false)]
        public bool Winner { get; set; }

        /// <summary>
        /// Name of the software package containing the reference taxonomy
        /// </summary>
        /// <value>Name of the software package containing the reference taxonomy</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string Namespace { get; set; }

        /// <summary>
        /// Score expressed as a percentage of the sum of the scores of all the candidate categories, winners and not (see the **score** property)
        /// </summary>
        /// <value>Score expressed as a percentage of the sum of the scores of all the candidate categories, winners and not (see the **score** property)</value>
        [DataMember(Name="frequency", EmitDefaultValue=false)]
        public float Frequency { get; set; }

        /// <summary>
        /// Positions of the portions of text that contributed to the selection of the category
        /// </summary>
        /// <value>Positions of the portions of text that contributed to the selection of the category</value>
        [DataMember(Name="positions", EmitDefaultValue=false)]
        public List<DocumentPosition> Positions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Hierarchy: ").Append(Hierarchy).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Winner: ").Append(Winner).Append("\n");
            sb.Append("  Namespace: ").Append(Namespace).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Positions: ").Append(Positions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Category);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="input">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Hierarchy == input.Hierarchy ||
                    this.Hierarchy != null &&
                    input.Hierarchy != null &&
                    this.Hierarchy.SequenceEqual(input.Hierarchy)
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Winner == input.Winner ||
                    (this.Winner != null &&
                    this.Winner.Equals(input.Winner))
                ) && 
                (
                    this.Namespace == input.Namespace ||
                    (this.Namespace != null &&
                    this.Namespace.Equals(input.Namespace))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.Positions == input.Positions ||
                    this.Positions != null &&
                    input.Positions != null &&
                    this.Positions.SequenceEqual(input.Positions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Hierarchy != null)
                    hashCode = hashCode * 59 + this.Hierarchy.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Winner != null)
                    hashCode = hashCode * 59 + this.Winner.GetHashCode();
                if (this.Namespace != null)
                    hashCode = hashCode * 59 + this.Namespace.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                if (this.Positions != null)
                    hashCode = hashCode * 59 + this.Positions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
