/* 
 * expert.ai Natural Language API
 *
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * The version of the OpenAPI document: v2
 * Contact: api.inquiry@expert.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ExpertIO.Client.Client.OpenAPIDateConverter;

namespace ExpertIO.Client.Model
{
    /// <summary>
    /// Token info
    /// </summary>
    [DataContract]
    public partial class Token :  IEquatable<Token>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Token" /> class.
        /// </summary>
        /// <param name="start">Zero-based position of the first character of the token.</param>
        /// <param name="end">Zero-based position of the first character after the token.</param>
        /// <param name="type">Cogito type.</param>
        /// <param name="pos">&lt;a href&#x3D;&#39;https://universaldependencies.org/u/pos/&#39;&gt;Universal Dependencies part-of-speech tag&lt;/a&gt;.</param>
        /// <param name="lemma">Lemma.</param>
        /// <param name="syncon">ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array.</param>
        /// <param name="morphology">A semicolon separated list of &lt;a href&#x3D;&#39;https://universaldependencies.org/format.html#morphological-annotation&#39;&gt;CoNLL-U format&lt;/a&gt; morphological features.</param>
        /// <param name="dependency">dependency.</param>
        /// <param name="atoms">Atoms that make up the token.</param>
        /// <param name="paragraph">Paragraph index in the &#x60;paragraphs&#x60; array.</param>
        /// <param name="sentence">Sentence index in the &#x60;sentences&#x60; array.</param>
        /// <param name="phrase">Phrase index in the &#x60;phrases&#x60; array.</param>
        public Token(long start = default(long), long end = default(long), string type = default(string), string pos = default(string), string lemma = default(string), long syncon = default(long), string morphology = default(string), Dependency dependency = default(Dependency), List<Atom> atoms = default(List<Atom>), long paragraph = default(long), long sentence = default(long), long phrase = default(long))
        {
            this.Start = start;
            this.End = end;
            this.Type = type;
            this.Pos = pos;
            this.Lemma = lemma;
            this.Syncon = syncon;
            this.Morphology = morphology;
            this.Dependency = dependency;
            this.Atoms = atoms;
            this.Paragraph = paragraph;
            this.Sentence = sentence;
            this.Phrase = phrase;
        }
        
        /// <summary>
        /// Zero-based position of the first character of the token
        /// </summary>
        /// <value>Zero-based position of the first character of the token</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public long Start { get; set; }

        /// <summary>
        /// Zero-based position of the first character after the token
        /// </summary>
        /// <value>Zero-based position of the first character after the token</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public long End { get; set; }

        /// <summary>
        /// Cogito type
        /// </summary>
        /// <value>Cogito type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// &lt;a href&#x3D;&#39;https://universaldependencies.org/u/pos/&#39;&gt;Universal Dependencies part-of-speech tag&lt;/a&gt;
        /// </summary>
        /// <value>&lt;a href&#x3D;&#39;https://universaldependencies.org/u/pos/&#39;&gt;Universal Dependencies part-of-speech tag&lt;/a&gt;</value>
        [DataMember(Name="pos", EmitDefaultValue=false)]
        public string Pos { get; set; }

        /// <summary>
        /// Lemma
        /// </summary>
        /// <value>Lemma</value>
        [DataMember(Name="lemma", EmitDefaultValue=false)]
        public string Lemma { get; set; }

        /// <summary>
        /// ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array
        /// </summary>
        /// <value>ID used to look up Knowledge Graph data in the &#x60;knowledge&#x60; array</value>
        [DataMember(Name="syncon", EmitDefaultValue=false)]
        public long Syncon { get; set; }

        /// <summary>
        /// A semicolon separated list of &lt;a href&#x3D;&#39;https://universaldependencies.org/format.html#morphological-annotation&#39;&gt;CoNLL-U format&lt;/a&gt; morphological features
        /// </summary>
        /// <value>A semicolon separated list of &lt;a href&#x3D;&#39;https://universaldependencies.org/format.html#morphological-annotation&#39;&gt;CoNLL-U format&lt;/a&gt; morphological features</value>
        [DataMember(Name="morphology", EmitDefaultValue=false)]
        public string Morphology { get; set; }

        /// <summary>
        /// Gets or Sets Dependency
        /// </summary>
        [DataMember(Name="dependency", EmitDefaultValue=false)]
        public Dependency Dependency { get; set; }

        /// <summary>
        /// Atoms that make up the token
        /// </summary>
        /// <value>Atoms that make up the token</value>
        [DataMember(Name="atoms", EmitDefaultValue=false)]
        public List<Atom> Atoms { get; set; }

        /// <summary>
        /// Paragraph index in the &#x60;paragraphs&#x60; array
        /// </summary>
        /// <value>Paragraph index in the &#x60;paragraphs&#x60; array</value>
        [DataMember(Name="paragraph", EmitDefaultValue=false)]
        public long Paragraph { get; set; }

        /// <summary>
        /// Sentence index in the &#x60;sentences&#x60; array
        /// </summary>
        /// <value>Sentence index in the &#x60;sentences&#x60; array</value>
        [DataMember(Name="sentence", EmitDefaultValue=false)]
        public long Sentence { get; set; }

        /// <summary>
        /// Phrase index in the &#x60;phrases&#x60; array
        /// </summary>
        /// <value>Phrase index in the &#x60;phrases&#x60; array</value>
        [DataMember(Name="phrase", EmitDefaultValue=false)]
        public long Phrase { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Token {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Pos: ").Append(Pos).Append("\n");
            sb.Append("  Lemma: ").Append(Lemma).Append("\n");
            sb.Append("  Syncon: ").Append(Syncon).Append("\n");
            sb.Append("  Morphology: ").Append(Morphology).Append("\n");
            sb.Append("  Dependency: ").Append(Dependency).Append("\n");
            sb.Append("  Atoms: ").Append(Atoms).Append("\n");
            sb.Append("  Paragraph: ").Append(Paragraph).Append("\n");
            sb.Append("  Sentence: ").Append(Sentence).Append("\n");
            sb.Append("  Phrase: ").Append(Phrase).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Token);
        }

        /// <summary>
        /// Returns true if Token instances are equal
        /// </summary>
        /// <param name="input">Instance of Token to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Token input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Pos == input.Pos ||
                    (this.Pos != null &&
                    this.Pos.Equals(input.Pos))
                ) && 
                (
                    this.Lemma == input.Lemma ||
                    (this.Lemma != null &&
                    this.Lemma.Equals(input.Lemma))
                ) && 
                (
                    this.Syncon == input.Syncon ||
                    (this.Syncon != null &&
                    this.Syncon.Equals(input.Syncon))
                ) && 
                (
                    this.Morphology == input.Morphology ||
                    (this.Morphology != null &&
                    this.Morphology.Equals(input.Morphology))
                ) && 
                (
                    this.Dependency == input.Dependency ||
                    (this.Dependency != null &&
                    this.Dependency.Equals(input.Dependency))
                ) && 
                (
                    this.Atoms == input.Atoms ||
                    this.Atoms != null &&
                    input.Atoms != null &&
                    this.Atoms.SequenceEqual(input.Atoms)
                ) && 
                (
                    this.Paragraph == input.Paragraph ||
                    (this.Paragraph != null &&
                    this.Paragraph.Equals(input.Paragraph))
                ) && 
                (
                    this.Sentence == input.Sentence ||
                    (this.Sentence != null &&
                    this.Sentence.Equals(input.Sentence))
                ) && 
                (
                    this.Phrase == input.Phrase ||
                    (this.Phrase != null &&
                    this.Phrase.Equals(input.Phrase))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Pos != null)
                    hashCode = hashCode * 59 + this.Pos.GetHashCode();
                if (this.Lemma != null)
                    hashCode = hashCode * 59 + this.Lemma.GetHashCode();
                if (this.Syncon != null)
                    hashCode = hashCode * 59 + this.Syncon.GetHashCode();
                if (this.Morphology != null)
                    hashCode = hashCode * 59 + this.Morphology.GetHashCode();
                if (this.Dependency != null)
                    hashCode = hashCode * 59 + this.Dependency.GetHashCode();
                if (this.Atoms != null)
                    hashCode = hashCode * 59 + this.Atoms.GetHashCode();
                if (this.Paragraph != null)
                    hashCode = hashCode * 59 + this.Paragraph.GetHashCode();
                if (this.Sentence != null)
                    hashCode = hashCode * 59 + this.Sentence.GetHashCode();
                if (this.Phrase != null)
                    hashCode = hashCode * 59 + this.Phrase.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
