/* 
 * expert.ai Natural Language API
 *
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * The version of the OpenAPI document: v2
 * Contact: api.inquiry@expert.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ExpertIO.Client.Client.OpenAPIDateConverter;

namespace ExpertIO.Client.Model
{
    /// <summary>
    /// Knowledge Graph data for a syncon
    /// </summary>
    [DataContract]
    public partial class KnowledgeEntry :  IEquatable<KnowledgeEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="KnowledgeEntry" /> class.
        /// </summary>
        /// <param name="syncon">Syncon ID.</param>
        /// <param name="label">Textual rendering of the general conceptual category for the token in the Knowledge Graph.</param>
        /// <param name="properties">Syncon extended properties.</param>
        public KnowledgeEntry(long syncon = default(long), string label = default(string), List<Property> properties = default(List<Property>))
        {
            this.Syncon = syncon;
            this.Label = label;
            this.Properties = properties;
        }
        
        /// <summary>
        /// Syncon ID
        /// </summary>
        /// <value>Syncon ID</value>
        [DataMember(Name="syncon", EmitDefaultValue=false)]
        public long Syncon { get; set; }

        /// <summary>
        /// Textual rendering of the general conceptual category for the token in the Knowledge Graph
        /// </summary>
        /// <value>Textual rendering of the general conceptual category for the token in the Knowledge Graph</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Syncon extended properties
        /// </summary>
        /// <value>Syncon extended properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<Property> Properties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KnowledgeEntry {\n");
            sb.Append("  Syncon: ").Append(Syncon).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as KnowledgeEntry);
        }

        /// <summary>
        /// Returns true if KnowledgeEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of KnowledgeEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KnowledgeEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Syncon == input.Syncon ||
                    (this.Syncon != null &&
                    this.Syncon.Equals(input.Syncon))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Syncon != null)
                    hashCode = hashCode * 59 + this.Syncon.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Properties != null)
                    hashCode = hashCode * 59 + this.Properties.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
