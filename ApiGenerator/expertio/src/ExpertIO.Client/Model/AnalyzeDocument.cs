/* 
 * expert.ai Natural Language API
 *
 * Natural Language API provides a comprehensive set of natural language understanding capabilities based on expert.ai technology: <ul>   <li>Text subdivision</li>   <li>Part-of-speech tagging</li>   <li>Syntactic analysis</li>   <li>Lemmatization</li>   <li>Keyphrase extraction</li>   <li>Semantic analysis</li>   <li>Named entity recognition</li>   <li>Relation extraction</li>   <li>Sentiment analysis</li>   <li>Classification</li> </ul> 
 *
 * The version of the OpenAPI document: v2
 * Contact: api.inquiry@expert.ai
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ExpertIO.Client.Client.OpenAPIDateConverter;

namespace ExpertIO.Client.Model
{
    /// <summary>
    /// Analysis data
    /// </summary>
    [DataContract]
    public partial class AnalyzeDocument :  IEquatable<AnalyzeDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyzeDocument" /> class.
        /// </summary>
        /// <param name="version">Service version.</param>
        /// <param name="language">Text language.</param>
        /// <param name="paragraphs">Paragraphs.</param>
        /// <param name="sentences">Sentences.</param>
        /// <param name="phrases">Phrases.</param>
        /// <param name="tokens">Tokens.</param>
        /// <param name="mainSentences">Main sentences.</param>
        /// <param name="mainPhrases">Main phrases.</param>
        /// <param name="mainLemmas">Main lemmas.</param>
        /// <param name="mainSyncons">Main syncons.</param>
        /// <param name="entities">Entities.</param>
        /// <param name="topics">Knowledge Graph topics.</param>
        /// <param name="knowledge">Knowledge Graph syncons data.</param>
        /// <param name="sentiment">Sentiment.</param>
        /// <param name="relations">Verb-mediated relations.</param>
        public AnalyzeDocument(string version = default(string), string language = default(string), List<Paragraph> paragraphs = default(List<Paragraph>), List<Sentence> sentences = default(List<Sentence>), List<Phrase> phrases = default(List<Phrase>), List<Token> tokens = default(List<Token>), List<MainSentence> mainSentences = default(List<MainSentence>), List<MainPhrase> mainPhrases = default(List<MainPhrase>), List<MainLemma> mainLemmas = default(List<MainLemma>), List<MainSyncon> mainSyncons = default(List<MainSyncon>), List<Entity> entities = default(List<Entity>), List<DocumentTopic> topics = default(List<DocumentTopic>), List<KnowledgeEntry> knowledge = default(List<KnowledgeEntry>), Object sentiment = default(Object), List<Relation> relations = default(List<Relation>))
        {
            this.Version = version;
            this.Language = language;
            this.Paragraphs = paragraphs;
            this.Sentences = sentences;
            this.Phrases = phrases;
            this.Tokens = tokens;
            this.MainSentences = mainSentences;
            this.MainPhrases = mainPhrases;
            this.MainLemmas = mainLemmas;
            this.MainSyncons = mainSyncons;
            this.Entities = entities;
            this.Topics = topics;
            this.Knowledge = knowledge;
            this.Sentiment = sentiment;
            this.Relations = relations;
        }
        
        /// <summary>
        /// Service version
        /// </summary>
        /// <value>Service version</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Text language
        /// </summary>
        /// <value>Text language</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Paragraphs
        /// </summary>
        /// <value>Paragraphs</value>
        [DataMember(Name="paragraphs", EmitDefaultValue=false)]
        public List<Paragraph> Paragraphs { get; set; }

        /// <summary>
        /// Sentences
        /// </summary>
        /// <value>Sentences</value>
        [DataMember(Name="sentences", EmitDefaultValue=false)]
        public List<Sentence> Sentences { get; set; }

        /// <summary>
        /// Phrases
        /// </summary>
        /// <value>Phrases</value>
        [DataMember(Name="phrases", EmitDefaultValue=false)]
        public List<Phrase> Phrases { get; set; }

        /// <summary>
        /// Tokens
        /// </summary>
        /// <value>Tokens</value>
        [DataMember(Name="tokens", EmitDefaultValue=false)]
        public List<Token> Tokens { get; set; }

        /// <summary>
        /// Main sentences
        /// </summary>
        /// <value>Main sentences</value>
        [DataMember(Name="mainSentences", EmitDefaultValue=false)]
        public List<MainSentence> MainSentences { get; set; }

        /// <summary>
        /// Main phrases
        /// </summary>
        /// <value>Main phrases</value>
        [DataMember(Name="mainPhrases", EmitDefaultValue=false)]
        public List<MainPhrase> MainPhrases { get; set; }

        /// <summary>
        /// Main lemmas
        /// </summary>
        /// <value>Main lemmas</value>
        [DataMember(Name="mainLemmas", EmitDefaultValue=false)]
        public List<MainLemma> MainLemmas { get; set; }

        /// <summary>
        /// Main syncons
        /// </summary>
        /// <value>Main syncons</value>
        [DataMember(Name="mainSyncons", EmitDefaultValue=false)]
        public List<MainSyncon> MainSyncons { get; set; }

        /// <summary>
        /// Entities
        /// </summary>
        /// <value>Entities</value>
        [DataMember(Name="entities", EmitDefaultValue=false)]
        public List<Entity> Entities { get; set; }

        /// <summary>
        /// Knowledge Graph topics
        /// </summary>
        /// <value>Knowledge Graph topics</value>
        [DataMember(Name="topics", EmitDefaultValue=false)]
        public List<DocumentTopic> Topics { get; set; }

        /// <summary>
        /// Knowledge Graph syncons data
        /// </summary>
        /// <value>Knowledge Graph syncons data</value>
        [DataMember(Name="knowledge", EmitDefaultValue=false)]
        public List<KnowledgeEntry> Knowledge { get; set; }

        /// <summary>
        /// Sentiment
        /// </summary>
        /// <value>Sentiment</value>
        [DataMember(Name="sentiment", EmitDefaultValue=false)]
        public Object Sentiment { get; set; }

        /// <summary>
        /// Verb-mediated relations
        /// </summary>
        /// <value>Verb-mediated relations</value>
        [DataMember(Name="relations", EmitDefaultValue=false)]
        public List<Relation> Relations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnalyzeDocument {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Paragraphs: ").Append(Paragraphs).Append("\n");
            sb.Append("  Sentences: ").Append(Sentences).Append("\n");
            sb.Append("  Phrases: ").Append(Phrases).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  MainSentences: ").Append(MainSentences).Append("\n");
            sb.Append("  MainPhrases: ").Append(MainPhrases).Append("\n");
            sb.Append("  MainLemmas: ").Append(MainLemmas).Append("\n");
            sb.Append("  MainSyncons: ").Append(MainSyncons).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  Knowledge: ").Append(Knowledge).Append("\n");
            sb.Append("  Sentiment: ").Append(Sentiment).Append("\n");
            sb.Append("  Relations: ").Append(Relations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnalyzeDocument);
        }

        /// <summary>
        /// Returns true if AnalyzeDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of AnalyzeDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnalyzeDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Paragraphs == input.Paragraphs ||
                    this.Paragraphs != null &&
                    input.Paragraphs != null &&
                    this.Paragraphs.SequenceEqual(input.Paragraphs)
                ) && 
                (
                    this.Sentences == input.Sentences ||
                    this.Sentences != null &&
                    input.Sentences != null &&
                    this.Sentences.SequenceEqual(input.Sentences)
                ) && 
                (
                    this.Phrases == input.Phrases ||
                    this.Phrases != null &&
                    input.Phrases != null &&
                    this.Phrases.SequenceEqual(input.Phrases)
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    input.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.MainSentences == input.MainSentences ||
                    this.MainSentences != null &&
                    input.MainSentences != null &&
                    this.MainSentences.SequenceEqual(input.MainSentences)
                ) && 
                (
                    this.MainPhrases == input.MainPhrases ||
                    this.MainPhrases != null &&
                    input.MainPhrases != null &&
                    this.MainPhrases.SequenceEqual(input.MainPhrases)
                ) && 
                (
                    this.MainLemmas == input.MainLemmas ||
                    this.MainLemmas != null &&
                    input.MainLemmas != null &&
                    this.MainLemmas.SequenceEqual(input.MainLemmas)
                ) && 
                (
                    this.MainSyncons == input.MainSyncons ||
                    this.MainSyncons != null &&
                    input.MainSyncons != null &&
                    this.MainSyncons.SequenceEqual(input.MainSyncons)
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) && 
                (
                    this.Topics == input.Topics ||
                    this.Topics != null &&
                    input.Topics != null &&
                    this.Topics.SequenceEqual(input.Topics)
                ) && 
                (
                    this.Knowledge == input.Knowledge ||
                    this.Knowledge != null &&
                    input.Knowledge != null &&
                    this.Knowledge.SequenceEqual(input.Knowledge)
                ) && 
                (
                    this.Sentiment == input.Sentiment ||
                    (this.Sentiment != null &&
                    this.Sentiment.Equals(input.Sentiment))
                ) && 
                (
                    this.Relations == input.Relations ||
                    this.Relations != null &&
                    input.Relations != null &&
                    this.Relations.SequenceEqual(input.Relations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Paragraphs != null)
                    hashCode = hashCode * 59 + this.Paragraphs.GetHashCode();
                if (this.Sentences != null)
                    hashCode = hashCode * 59 + this.Sentences.GetHashCode();
                if (this.Phrases != null)
                    hashCode = hashCode * 59 + this.Phrases.GetHashCode();
                if (this.Tokens != null)
                    hashCode = hashCode * 59 + this.Tokens.GetHashCode();
                if (this.MainSentences != null)
                    hashCode = hashCode * 59 + this.MainSentences.GetHashCode();
                if (this.MainPhrases != null)
                    hashCode = hashCode * 59 + this.MainPhrases.GetHashCode();
                if (this.MainLemmas != null)
                    hashCode = hashCode * 59 + this.MainLemmas.GetHashCode();
                if (this.MainSyncons != null)
                    hashCode = hashCode * 59 + this.MainSyncons.GetHashCode();
                if (this.Entities != null)
                    hashCode = hashCode * 59 + this.Entities.GetHashCode();
                if (this.Topics != null)
                    hashCode = hashCode * 59 + this.Topics.GetHashCode();
                if (this.Knowledge != null)
                    hashCode = hashCode * 59 + this.Knowledge.GetHashCode();
                if (this.Sentiment != null)
                    hashCode = hashCode * 59 + this.Sentiment.GetHashCode();
                if (this.Relations != null)
                    hashCode = hashCode * 59 + this.Relations.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
